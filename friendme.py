from telebot.async_telebot import AsyncTeleBot
import io
import random
import psycopg2
import datetime
from telebot import types
import os
from dotenv import load_dotenv, find_dotenv
import asyncio
from amplitude import Amplitude, Identify, EventOptions, BaseEvent
import sys
import uuid

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–¥–∏—Ä–æ–≤–∫—É –≤–≤–æ–¥–∞
sys.stdin.reconfigure(encoding='utf-8')

load_dotenv(find_dotenv())
print('bot is activated üó∏')

# Connect to the database
connect = psycopg2.connect(
    host=os.getenv('POSTGRES_HOST'),
    port=5432,
    database=os.getenv('POSTGRES_DB'),
    user=os.getenv('POSTGRES_USER'),
    password=os.getenv('POSTGRES_PASSWORD'),
)

if (os.getenv('isDocker')):
    path_to_db = '/root/db/friendMe.db'

amplitude = Amplitude(os.getenv('AMP_TOKEN'))
bot = AsyncTeleBot(os.getenv('BOT_TOKEN'))
bot_name = os.getenv('bot_name')
admin_id = 1900666417
admin_id2 = 522380141

support_admin = 1929558405


# STATUS: 10 - default user | 20 - admin | 30 - blocked


def amplitude_track(event_name, chat_id, event_props, user_props=None):
    chat_id = str(chat_id)

    if user_props != None:
        identify_obj = Identify()
        for key, value in user_props.items():
            identify_obj.set(key, value)
        amplitude.identify(identify_obj, EventOptions(user_id=chat_id))

    amplitude.track(
        BaseEvent(
            event_type=event_name,
            device_id=None,
            user_id=chat_id,
            event_properties=event_props
        )
    )


def init_bot():
    cursor = connect.cursor()

    cursor.execute("CREATE TABLE IF NOT EXISTS users(id SERIAL PRIMARY KEY, tg_id bigint, username varchar, ref_id BIGINT, date date, status integer, last_receiver_id bigint)")
    connect.commit()

    cursor.execute("CREATE TABLE IF NOT EXISTS images(id SERIAL PRIMARY KEY, id_image text, from_id bigint, media_group_id bigint, to_id bigint, media_type varchar, date date)")
    connect.commit()

    # child_loop = asyncio.new_event_loop()

    # asyncio.create_task(child_loop.run_until_complete(get_photo_user(1929558405)))


init_bot()

@bot.message_handler(commands=['sendall'])
async def send_all_message(message: types.Message):
    cursor = connect.cursor()
    cursor.execute("SELECT tg_id FROM users;")
    users =cursor.fetchall()
    print(users)
    if message.chat.id == admin_id:
        await bot.send_message(message.chat.id,'Starting')
        for i in users:
            await bot.send_message(i[0],message.text[message.text.find(' '):],parse_mode='html')
    else:
        await bot.send_message(message.chat.id,'–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')

@bot.message_handler(commands=['admin'])
async def admin_panel(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    item_admin_1 = types.InlineKeyboardButton(text='ü™™–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö', callback_data='item_admin1')
    item_admin_2 = types.InlineKeyboardButton(text='‚ù§Ô∏è‚Äçüî•–ù—é–¥—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='item_admin2')
    markup.add(item_admin_1, item_admin_2)
    if message.chat.id == admin_id:
        await bot.send_message(message.chat.id, 'üîì –í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)

    else:
        await bot.send_message(message.chat.id, 'üß± –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')


# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

def get_user(chat_id):
    cursor = connect.cursor()
    cursor.execute(f"SELECT * FROM users WHERE tg_id=%s", (chat_id,))
    return cursor.fetchone()


def auth_user(chat_id, username, ref_id=None, isPhoto=False):
    cursor = connect.cursor()
    cursor.execute("SELECT tg_id FROM users WHERE tg_id=%s", (chat_id,))
    data = cursor.fetchone()

    if data is None:

        amp_ref_id = ref_id

        if (ref_id == None):
            amp_ref_id = 0

        amplitude_track("new_user", chat_id, {
            "from_user_id": amp_ref_id
        }, {
                            "username": username,
                            "first_from_id": amp_ref_id,
                            "reg_time": datetime.datetime.now(),
                        })

        cursor.execute("INSERT INTO users (tg_id, username, ref_id, date, status) VALUES(%s,%s,%s,%s,%s);",(chat_id, username, ref_id, datetime.datetime.now(), 10))
        connect.commit()

        print("REG NEW USER: ", username, " | ", chat_id)


    else:
        if ref_id is not None:
            cursor.execute("UPDATE users SET ref_id=%s WHERE tg_id=%s", (ref_id, chat_id))
            connect.commit()

    cursor.execute("SELECT * FROM users WHERE tg_id=%s", (chat_id,))
    User = cursor.fetchone()

    # –ù–ï –¢–†–û–ì–ê–¢–¨!!!
    if (isPhoto == False):
        if User[6] != None:
            cursor.execute("UPDATE users SET last_receiver_id=%s WHERE tg_id=%s", (None, User[1],))
            connect.commit()

    return User

# –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–¥–µ–ª–æ–º –º–æ–∏ —Ñ–æ—Ç–æ

def validate_send_back(sender_id, receiver_id):
    cursor = connect.cursor()
    cursor.execute(f"SELECT * FROM images WHERE to_id=%s and from_id=%s", (sender_id, receiver_id,))

    return len(cursor.fetchall()) != 0


async def generate_collection_senders(chat_id, from_id=None, callback=None, current_element_count=None):
    markup = types.InlineKeyboardMarkup(row_width=2)

    cursor = connect.cursor()

    cursor.execute("SELECT * FROM images WHERE to_id=%s", (chat_id,))

    if len(cursor.fetchall()) == 0:
        await bot.send_message(chat_id, "üìÇ –í–∞—à–∞ –≥–∞–ª–µ—Ä–µ—è –ø—É—Å—Ç–∞—è\n\n–ß—Ç–æ –±—ã –µ—ë –ø–æ–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π\n–î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>–°–æ–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ —Å –¥—Ä—É–∑–µ–π</b>",parse_mode='html')
        return

    isFirst = False
    isLast = False
    previous_element = None
    current_element = None
    next_element = None

    item_previous = None
    item_next = None

    if from_id == None:

        isFirst = True
        cursor.execute("SELECT from_id FROM images WHERE to_id = %s ORDER BY from_id LIMIT 2", (chat_id, ))
        elements = cursor.fetchall()

        if (len(elements) == 2):
            current_element = elements[0][0]
            next_element = elements[1][0]
        elif (len(elements) == 1):
            isLast = True
            current_element = elements[0][0]

    elif from_id != None:
        cursor.execute("SELECT from_id FROM images WHERE from_id = %s AND to_id = %s ORDER BY from_id LIMIT 1", (from_id, chat_id, ))
        current_element = cursor.fetchone()

        if current_element != None:

            cursor.execute("SELECT from_id FROM images WHERE from_id < %s AND to_id = %s ORDER BY from_id LIMIT 1", (from_id, chat_id, ))
            previous_element = cursor.fetchone()

            cursor.execute("SELECT from_id FROM images WHERE from_id > %s AND to_id = %s ORDER BY from_id LIMIT 1", (from_id, chat_id, ))
            next_element = cursor.fetchone()

            if previous_element == None:
                isFirst = True 
            else:
                previous_element = previous_element[0]

            if next_element == None:
                isLast = True
            else:
                next_element = next_element[0]

            current_element = current_element[0]


    else:
        print("Error in photo menu generator, all input param is None")
        return

    media = get_media_from_user(chat_id, current_element)

    print("MEDIA INSIDE: ", media)

    media = media[0]

    if (isFirst is False):
        item_previous = types.InlineKeyboardButton(text='<<', callback_data='photo_m_element_id:'+str(previous_element)+':'+str(len(media)))

    elif (isLast is False):
        item_next = types.InlineKeyboardButton(text='>>', callback_data='photo_m_element_id:'+str(next_element)+':'+str(len(media)))

    item_current = types.InlineKeyboardButton('–ñ–∞–ª–æ–±–∞ ', callback_data='photo_m_element_id_report:'+str(current_element))

    if item_previous is None:
        if item_next is None:
            markup.add(item_current)
        else:
            markup.add(item_current, item_next)
    elif item_next is None:
        if item_previous is None:
            markup.add(item_current)
        else:
            markup.add(item_previous, item_current)

    sender_name = get_user(current_element)[2]

    if callback == None:
        await bot.send_media_group(chat_id, media)
        await bot.send_message(chat_id,f"<b>–û—Ç: @{sender_name}</b>",parse_mode='html', reply_markup=markup)
    else:

        i = 0
        current_element_count = int(current_element_count)

        print("delete last message count: ",current_element_count + 1)

        while(i <= current_element_count):
            await bot.delete_message(chat_id, (callback.message.message_id - i))
            print("les:", i)
            i+=1
        print("ends")
        await bot.send_media_group(chat_id, media)
        await bot.send_message(chat_id,f"<b>–û—Ç: @{sender_name}</b>",parse_mode='html', reply_markup=markup)


def get_media_from_user(chat_id, from_id):
    cursor = connect.cursor()

    i = 0
    gp = 0
    media_group_data = []
    media_group_tmp_arr = []

    # SEND SINGLE MEDIA

    cursor.execute("SELECT * FROM images WHERE to_id=%s AND from_id=%s", (chat_id, from_id,))

    if len(cursor.fetchall()) == 0:
        return

    cursor.execute("SELECT id_image, media_type FROM images WHERE to_id=%s AND from_id=%s AND media_group_id IS NULL",(chat_id, from_id,))
    media_arr = cursor.fetchall()

    if len(media_arr) != 0:

        for single_media in media_arr:
            if (i >= 15):
                i = 0
                gp+= 1

                media_group_data.insert(gp, media_group_tmp_arr)
                media_group_tmp_arr = []

            if single_media[1] == "photo":
                media_group_tmp_arr.append(types.InputMediaPhoto(single_media[0]))
            else:
                media_group_tmp_arr.append(types.InputMediaVideo(single_media[0]))

    # SEND MULTI MEDIA
    cursor.execute(
        "SELECT DISTINCT media_group_id FROM images WHERE to_id=%s AND from_id=%s AND media_group_id IS NOT NULL",(chat_id, from_id,))
    all_user_photo_groups = cursor.fetchall()

    if len(all_user_photo_groups) != 0:

        for group_id in all_user_photo_groups:

            cursor.execute("SELECT id_image, media_type FROM images WHERE media_group_id=%s",(group_id[0],))
            media_arr = cursor.fetchall()

            for single_media in media_arr:
                if (i >= 15):
                    i = 0
                    gp+= 1

                    media_group_data.insert(gp, media_group_tmp_arr)
                    media_group_tmp_arr = []

                if single_media[1] == "photo":
                    media_group_tmp_arr.append(types.InputMediaPhoto(single_media[0]))
                else:
                    media_group_tmp_arr.append(types.InputMediaVideo(single_media[0]))
                i=+1

            media_group_data.insert(gp, media_group_tmp_arr)
            media_group_tmp_arr = []

    return media_group_data

# –û—á–∏—Å—Ç–∏—Ç—å –ë–î
@bot.message_handler(commands=['get_photos'])
async def get_photos(message):
    if message.chat.id == admin_id or message.chat.id == admin_id2:
        print("GET PHOTOS!")

        cursor = connect.cursor()
        cursor.execute("SELECT id_image, from_id, to_id FROM images")
        images = cursor.fetchall()

        for photo in images:
            print("photo:", photo[0])
            if not os.path.exists("user_content"):
                os.makedirs("user_content")
            f_id = photo[0]
            file_info = await bot.get_file(f_id)
            down_file = await bot.download_file(file_info.file_path)

            await bot.send_photo(message.chat.id, down_file)

            # with open(os.path.join("user_content", photo[0] + ".jpg"), 'wb') as file:
            #     file.write(down_file)
            #     print("SAVE IMAGE:", photo[0])

    else:
        await bot.send_message(message.chat.id, "üîí You are not admin")

# def validateUser(chat_id):
#     current_user = get_user(chat_id)
#     if current_user[5] == 30:
#         bot.send_message(chat_id, "You are blocked! Huilo")
#         return

# –ú–µ–Ω—é –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=['start'])
async def start(message):
    ref_id = None
    ref_id_arr = (message.text).split(' ')
    witch_ref_link = False

    if len(ref_id_arr) > 1:
        if get_user(ref_id_arr[1]) is not None and ref_id_arr[1] != None:
            if int(ref_id_arr[1]) == message.from_user.id:
                await send_menu_message(message.chat.id, '<b>‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–≤–æ—é –∂–µ —Å—Å—ã–ª–∫—É</b>')
                return
            else:
                ref_id = ref_id_arr[1]
                witch_ref_link = True

    User = auth_user(message.from_user.id, message.from_user.username or message.from_user.first_name, ref_id)

    if User[3] is not None and ref_id == None:
        await only_photo(User)
        return

    if witch_ref_link == True:
        await start_with_ref_link(User[1], ref_id)
    else:
        await send_menu_message(message.chat.id,'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!üëã</b>\n–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —Å–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ç–æ  —Å —Ç–æ–±–æ–π –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∑–∞–±—ã—Ç—ã–µ –∏ —Å–º–µ—à–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã!\n\n<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n1Ô∏è‚É£–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é <b>"–°–æ–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –¥—Ä—É–∑–µ–π"</b>\n2Ô∏è‚É£–í—ã–±–µ—Ä–∏—Ç–µ <b>"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π Instagram"</b>\n3Ô∏è‚É£ÔªøÔªø–î–æ–±–∞–≤—å—Ç–µ —Å–µ–±–µ –∏—Å—Ç–æ—Ä–∏—é –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ\n4Ô∏è‚É£–í—Å–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤—è—Ç –¥—Ä—É–∑—å—è –º—ã –±—É–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ <b>"–ú–æ—è –≥–∞–ª–µ—Ä–µ—è"</b>\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –æ–± —ç—Ç–æ–º —Å–∫–∞–∂–µ–ºüòä')

@bot.message_handler(content_types=['text'])
async def chat_message(message):
    User = auth_user(message.from_user.id, message.from_user.username or message.from_user.first_name)

    if User[3] is not None:
        await only_photo(User)
        return

    ref_id = message.chat.id
    if message.text == 'üåÅ –ú–æ—è –≥–∞–ª–µ—Ä–µ—è':
        await generate_collection_senders(message.chat.id)
        # await get_photo_user_album(message.chat.id)
        # await get_video_user_album(message.chat.id)
    elif message.text == 'üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å':
        markup_info = types.InlineKeyboardMarkup(row_width=2)
        item_info1 = types.InlineKeyboardButton(text='üì¨ Support', callback_data='instagram_info',url='https://t.me/friendme_support')
        item_info2 = types.InlineKeyboardButton(text='üì¢ Telegram Group', callback_data='twitter_info',url='https://t.me/+jXQVsce2gYVjZTgy')
        markup_info.add(item_info1, item_info2)
        await bot.send_message(message.chat.id,'<b>–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å</b>\n\n–í —Å–ª—É—á–∞–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –∏–ª–∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ , –ø—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—Å—è –≤ –Ω–∞—à—É —Ç–µ—Ö-–ø–æ–¥–¥–µ—Ä–∂—É –ø–æ –∞–¥—Ä–µ—Å—É : @friendme_support\n\n–¢–∞–∫ –∂–µ –µ—Å–ª–∏ —É –≤–∞—Å —Å–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ,–º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –ø–æ –∞–¥—Ä–µ—Å—É : @friendme_offers\n\n<b>FriendMe –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:</b>',parse_mode='html', reply_markup=markup_info)
    elif message.text == 'üì∏ –°–æ–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –¥—Ä—É–∑–µ–π':
        markup = types.InlineKeyboardMarkup(row_width=1)
        item1 = types.InlineKeyboardButton(text='–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Instagram Stories', callback_data='share1')
        item2 = types.InlineKeyboardButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –≤ Telegram',switch_inline_query=f'\n\nüëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±—ã —Ö–æ—Ç–µ–ª –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –≤–∞–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π üîó: https://t.me/{bot_name}?start={ref_id}\n\n–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ, —Ç—ã —Å–º–æ–∂–µ—à—å –ª–µ–≥–∫–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∏ —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –∏—Ö –ø–æ–ª—É—á—É. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –¥–µ–ª–∏—Ç—å—Å—è –≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–Ω–∏–º–∫–∞–º–∏ –≤–º–µ—Å—Ç–µ! ü§©')
        item3 = types.InlineKeyboardButton(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –≤ —á–∞—Ç–µ', callback_data='share3')
        markup.add(item1, item2, item3)
        await bot.send_message(message.chat.id,'<b>‚§¥Ô∏è –ß—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –¥—Ä—É–∑–µ–π, –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –Ω–∏–º–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π, –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –Ω–∏–∂–µ:</b>',parse_mode='html', reply_markup=markup)
    elif message.text == 'üìï –û –Ω–∞—Å':
        info_image = open('images/infoimg.png', 'rb')
        await bot.send_photo(message.chat.id, info_image,caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ FriendMe, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π!\n\n–ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å –±–ª–∏–∑–∫–∏–º–∏ –ª—é–¥—å–º–∏ - —ç—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–∏—è—Ç–Ω–æ. –ü–æ—ç—Ç–æ–º—É –º—ã —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ–±–º–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –µ—â–µ –±–æ–ª–µ–µ —É–¥–æ–±–Ω—ã–º –∏ –ø—Ä–∏—è—Ç–Ω—ã–º –¥–ª—è –≤–∞—Å.\n\n–ü–æ—ç—Ç–æ–º—É —á—Ç–æ –±—ã –ø–æ–ª—É—á–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π ,—Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–ª–∏ –∂–µ –∫–æ–ª–µ–≥  —Å –ª—é–±–æ–≥–æ —Ä–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è . –í–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –ª–µ–≥–∫–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –µ–π –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n\n–ú—ã –Ω–∞—Ü–µ–ª–µ–Ω—ã –Ω–∞ –≤–∞—à–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –ø–æ—ç—Ç–æ–º—É –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º –∏ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞–Ω–∏–µ–º –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. –ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º —Å–∞–º—ã–π –ø—Ä–∏—è—Ç–Ω—ã–π –∏ —É–¥–æ–±–Ω—ã–π –æ–ø—ã—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –∏ –¥–∞—Ä–∏—Ç–µ —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Ä–∞–¥–æ—Å—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ú—ã –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≤–∞—à–∏–º –Ω–∞–¥–µ–∂–Ω—ã–º —Å–ø—É—Ç–Ω–∏–∫–æ–º –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –≤–∞—à–∏–º–∏ –±–ª–∏–∑–∫–∏–º–∏.')
    else:
        await error_command(message.chat.id)
        return

    print("EVENT BTN CLICK:", str(message.text))
    amplitude_track("btn_click", User[1], {
        "button_name": str(message.text)
    })

@bot.message_handler(content_types=['video'])
async def video(message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É —Ç–æ —Å–æ–∑–¥–∞—ë–º
    User = auth_user(message.from_user.id, message.from_user.username or message.from_user.first_name, isPhoto=True)

    print("media_group:", message.media_group_id)

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É
    ref_id = User[3]

    if ref_id == None:
        if User[6] != None:
            ref_id = User[6]

    if ref_id == None:
        return await error_command(User[1])
    else:
        friendUser = get_user(ref_id)
        media_group_id = message.media_group_id

        # –ü–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        image_id = message.video.file_id

        date_image = datetime.datetime.now()
        from_id = message.from_user.id

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor = connect.cursor()
        cursor.execute("INSERT INTO images (id_image, from_id, media_group_id, to_id, media_type, date) VALUES(%s,%s,%s,%s,%s,%s);",(image_id, from_id, media_group_id, ref_id, "video", date_image))
        connect.commit()

        # BTN SEND MORE

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(text='üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë', url=f"https://t.me/{bot_name}?start={friendUser[1]}"))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä

        if media_group_id is not None:
            cursor.execute("SELECT * FROM images WHERE media_group_id=%s", (media_group_id,))
            data = cursor.fetchall()

            if len(data) <= 1:
                if (User[6] == None):
                    await send_menu_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
                    await bot.send_message(message.chat.id,f"üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≤–∞–º–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø–µ—Ä–µ—à–ª–µ–º –≤–∞–º :) \n\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>¬´{friendUser[2]}¬ª</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë¬ª</b>",reply_markup=markup, parse_mode='html')
                    await bot.send_message(ref_id,'üíå –° –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –≤–∏–¥–µ–æ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>üåÅ –ú–æ—è –≥–∞–ª–µ—Ä–µ—è</b>',parse_mode='html')

                    amplitude_track("send_video", message.chat.id, {
                        "to_user_id": ref_id
                    })

                cursor.execute("UPDATE users SET ref_id=%s, last_receiver_id=%s WHERE tg_id=%s", (None, ref_id, User[1],))
                connect.commit()

                await bot.send_video(support_admin, image_id,
                                     caption="[Admin] –í–∏–¥–µ–æ –æ—Ç " + User[2] + " –∫ " + friendUser[2])

        else:
            await send_menu_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤–∏–¥–µ–æ!")
            await bot.send_message(ref_id,'üíå –° –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å –≤–∏–¥–µ–æ\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>üåÅ –ú–æ—è –≥–∞–ª–µ—Ä–µ—è</b>',parse_mode='html')
            await bot.send_message(message.chat.id,
                                   f"üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –∫–∞–∫–∏–µ-—Ç–æ –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≤–∞–º–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø–µ—Ä–µ—à–ª–µ–º –≤–∞–º  :) \n\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>¬´{friendUser[2]}¬ª</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë¬ª</b>",
                                   reply_markup=markup, parse_mode='html')

            amplitude_track("send_video", message.chat.id, {
                "to_user_id": ref_id
            })

            cursor.execute("UPDATE users SET ref_id=%s WHERE tg_id=%s", (None, User[1],))
            connect.commit()

            # await bot.send_video(support_admin, image_id, caption="[Admin] –§–æ—Ç–æ –æ—Ç "+ User[2] +" –∫ "+friendUser[2])

@bot.message_handler(content_types=['photo'])
async def photo(message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É —Ç–æ —Å–æ–∑–¥–∞—ë–º
    User = auth_user(message.from_user.id, message.from_user.username or message.from_user.first_name, isPhoto=True)

    print("media_group:", message.media_group_id)

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É
    ref_id = User[3]

    if ref_id == None:
        if User[6] != None:
            ref_id = User[6]

    if ref_id == None:
        return await error_command(User[1])
    else:
        friendUser = get_user(ref_id)
        media_group_id = message.media_group_id

        # –ü–æ–ª—É—á–∞–µ–º id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        image_id = message.photo[-1].file_id

        date_image = datetime.datetime.now()
        from_id = message.from_user.id

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor = connect.cursor()
        cursor.execute("INSERT INTO images (id_image, from_id, media_group_id, to_id, media_type, date) VALUES(%s,%s,%s,%s,%s,%s);",(image_id, from_id, media_group_id, ref_id, "photo", date_image))
        connect.commit()

        # BTN SEND MORE

        markup = types.InlineKeyboardMarkup()
        markup.add(
            types.InlineKeyboardButton(text='üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë', url=f"https://t.me/{bot_name}?start={friendUser[1]}"))
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—É—Ñ–µ—Ä

        if media_group_id is not None:
            cursor.execute("SELECT * FROM images WHERE media_group_id=%s", (media_group_id,))
            data = cursor.fetchall()

            if len(data) <= 1:
                if (User[6] == None):
                    await send_menu_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")
                    await bot.send_message(message.chat.id,f"üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –∫–∞–∫–∏–µ-—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≤–∞–º–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø–µ—Ä–µ—à–ª–µ–º –≤–∞–º :) \n\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>¬´{friendUser[2]}¬ª</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë¬ª</b>",reply_markup=markup, parse_mode='html')
                    await bot.send_message(ref_id,'üíå –° –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>üåÅ –ú–æ—è –≥–∞–ª–µ—Ä–µ—è</b>',parse_mode='html')

                    amplitude_track("send_photo", message.chat.id, {
                        "to_user_id": ref_id
                    })

                cursor.execute("UPDATE users SET ref_id=%s, last_receiver_id=%s WHERE tg_id=%s", (None, ref_id, User[1],))
                connect.commit()

                await bot.send_photo(support_admin, image_id,
                                     caption="[Admin] –§–æ—Ç–æ –æ—Ç " + User[2] + " –∫ " + friendUser[2])

        else:
            await send_menu_message(message.chat.id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
            await bot.send_message(ref_id,'üíå –° –≤–∞–º–∏ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏\n\n–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏—Ö –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª <b>üåÅ –ú–æ—è –≥–∞–ª–µ—Ä–µ—è</b>',parse_mode='html')
            await bot.send_message(message.chat.id,f"üëÄ –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤–∞—à–µ–º—É –¥—Ä—É–≥—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç –∫–∞–∫–∏–µ-—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å –≤–∞–º–∏, –ø–æ—Å–ª–µ —á–µ–≥–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Ö –ø–µ—Ä–µ—à–ª–µ–º –≤–∞–º  :) \n\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>¬´{friendUser[2]}¬ª</b> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ <b>¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë¬ª</b>",reply_markup=markup, parse_mode='html')

            amplitude_track("send_photo", message.chat.id, {
                "to_user_id": ref_id
            })

            cursor.execute("UPDATE users SET ref_id=%s WHERE tg_id=%s", (None, User[1],))
            connect.commit()

            await bot.send_photo(support_admin, image_id, caption="[Admin] –§–æ—Ç–æ –æ—Ç " + User[2] + " –∫ " + friendUser[2])

@bot.callback_query_handler(func=lambda callback: callback.data)
async def callback(callback):
    User = auth_user(callback.message.chat.id,callback.message.from_user.username or callback.message.from_user.first_name)

    if User[3] is not None:
        await only_photo(User)
        return

    if (callback.data.find(":") != -1):
        command = callback.data.split(":")
        if command[0] == "photo_m_element_id":
            await generate_collection_senders(callback.message.chat.id, command[1], callback, current_element_count=command[2])

    if callback.data == 'cancel_send_photo':

        if User[3] is None:
            return await error_command(User[1])

        await send_menu_message(callback.message.chat.id, "‚ùå –û—Ç–º–µ–Ω–∞")

        cursor = connect.cursor()
        cursor.execute("UPDATE users SET ref_id=%s WHERE tg_id=%s", (None, callback.message.chat.id,))
        connect.commit()

        await bot.send_message(callback.message.chat.id,'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!üëã</b>\n–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —Å–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ç–æ–±–æ–π –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∑–∞–±—ã—Ç—ã–µ –∏ —Å–º–µ—à–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã!\n\n<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n1Ô∏è‚É£–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é "–°–æ–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –¥—Ä—É–∑–µ–π"\n2Ô∏è‚É£–í—ã–±–µ—Ä–∏—Ç–µ "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∏—Å—Ç–æ—Ä–∏–µ–π Instagram"\n3Ô∏è‚É£ÔªøÔªø–î–æ–±–∞–≤—å—Ç–µ —Å–µ–±–µ –∏—Å—Ç–æ—Ä–∏—é –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∫–∞–∫ —É–∫–∞–∑–∞–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ\n4Ô∏è‚É£–í—Å–µ —Ñ–æ—Ç–æ –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤—è—Ç –¥—Ä—É–∑—å—è –º—ã –±—É–¥–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ "–ú–æ—è –≥–∞–ª–µ—Ä–µ—è"\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∫—Ç–æ-—Ç–æ –∏–∑ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç —á—Ç–æ-—Ç–æ –ø–æ —Å—Å—ã–ª–∫–µ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Ç–µ–±–µ –æ–± —ç—Ç–æ–º —Å–∫–∞–∂–µ–ºüòä', parse_mode='html')

        return

    ref_id = callback.message.chat.id

    if callback.data == 'itemmyphoto2':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item_my_photo1 = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç', callback_data='itemmyphoto1')
        item_my_photo2 = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='itemmyphoto2')
        item_my_photo3 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='itemmyphoto2')
        markup.add(item_my_photo3, item_my_photo2, item_my_photo1)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,text=f'üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º 15 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ 5 –≤–∏–¥–µ–æ:\n\n–ß—Ç–æ –±—ã –∏—Ö —É–≤–∏–¥–µ—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –≤ –æ—Ç–≤–µ—Ç –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª —Å –µ–≥–æ —É—á–∞—Å—Ç–∏–µ–º\n\n–û—Ç–ø—Ä–∞–≤—Ç–µ –∏—Ö –ø–æ –µ–≥–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç"',reply_markup=markup)
    elif callback.data == 'itemmyphoto3':
        markup = types.InlineKeyboardMarkup(row_width=2)
        item_my_photo1 = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç', callback_data='itemmyphoto1')
        item_my_photo2 = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='itemmyphoto2')
        item_my_photo3 = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='itemmyphoto2')
        markup.add(item_my_photo3, item_my_photo2, item_my_photo1)
        await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id,text=f'üì∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.first_name} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤–∞–º 10 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ 2 –≤–∏–¥–µ–æ:\n\n–ß—Ç–æ –±—ã –∏—Ö —É–≤–∏–¥–µ—Ç—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –≤ –æ—Ç–≤–µ—Ç –ª—é–±—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª —Å –µ–≥–æ —É—á–∞—Å—Ç–∏–µ–º\n\n–û—Ç–ø—Ä–∞–≤—Ç–µ –∏—Ö –ø–æ –µ–≥–æ —Å—Å—ã–ª–∫–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –æ—Ç–≤–µ—Ç"',reply_markup=markup)
    elif callback.data == 'share1':
        markup = types.InlineKeyboardMarkup()
        item_next = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data='item_next1')
        markup.add(item_next)
        image = open('images/inst4.png', 'rb')
        await bot.send_photo(callback.message.chat.id, image,caption='–ß—Ç–æ–±—ã –≤—ã–ª–æ–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ , —Å–¥–µ–ª–∞–π—Ç–µ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:',reply_markup=markup)
    elif callback.data == 'share2':
        await bot.send_message(callback.message.chat.id, '')
    elif callback.data == 'share3':
        await bot.send_message(callback.message.chat.id, f'https://t.me/{bot_name}?start={ref_id}')
    elif callback.data == 'item_next1':
        media = open("images/instphoto.png", "rb")
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back2')
        item_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='item_next2')
        markup.add(item_back, item_next)
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption="1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:"),reply_markup=markup)
    elif callback.data == 'item_back2':
        markup = types.InlineKeyboardMarkup()
        item_next = types.InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å', callback_data='item_next1')
        markup.add(item_next)
        media = open('images/inst4.png', 'rb')
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption='–ß—Ç–æ–±—ã –≤—ã–ª–æ–∂–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –≤—ã—à–µ, —Å–¥–µ–ª–∞–π—Ç–µ 3 –ø—Ä–æ—Å—Ç—ã—Ö —à–∞–≥–∞:'),reply_markup=markup)
    elif callback.data == 'item_next2':
        media = open('images/inst2.png', 'rb')
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back3')
        item_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='item_next3')
        markup.add(item_back, item_next)
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption='2Ô∏è‚É£–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º —Å—Ç–æ—Ä–∏—Å –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä:'),reply_markup=markup)
    elif callback.data == 'item_back3':
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back2')
        item_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='item_next2')
        markup.add(item_back, item_next)
        media = open('images/instphoto.png', 'rb')
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption='Ô∏è1Ô∏è‚É£–°–∫–∞—á–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏:'),reply_markup=markup)
    elif callback.data == 'item_next3':
        media = open('images/inst3.png', 'rb')
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back4')
        item_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='item_share4')
        markup.add(item_back, item_next)
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption=f"3Ô∏è‚É£–í –ø–æ–ª–µ URL –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É:‚§µÔ∏è\n\nhttps://t.me/{bot_name}?start={ref_id}"),reply_markup=markup)
    elif callback.data == 'item_back4':
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back3')
        item_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='item_next3')
        markup.add(item_back, item_next)
        media = open('images/inst2.png', 'rb')
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption='Ô∏è2Ô∏è‚É£–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º —Å—Ç–æ—Ä–∏—Å:'),reply_markup=markup)
    elif callback.data == 'item_share4':
        media = open('images/inst4.png', 'rb')
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back5')
        markup.add(item_back)
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption="üéâ–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–µ–ª–∏–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏, —Ç–µ–ø–µ—Ä—å –æ—Å—Ç–∞–ª–æ—Å—å –ø–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ –∫—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–∞–∫–∏–µ-—Ç–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ :)"),reply_markup=markup)
    elif callback.data == 'item_back5':
        markup = types.InlineKeyboardMarkup()
        item_back = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='item_back4')
        item_next = types.InlineKeyboardButton(text='–î–∞–ª–µ–µ', callback_data='item_share4')
        markup.add(item_back, item_next)
        media = open('images/inst3.png', 'rb')
        await bot.edit_message_media(chat_id=callback.message.chat.id, message_id=callback.message.message_id,media=types.InputMediaPhoto(media,caption=f"3Ô∏è‚É£–î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π:‚§µÔ∏è\n\nhttps://t.me/{bot_name}?start={ref_id}"),reply_markup=markup)
        await bot.edit_message_caption(chat_id=callback.message.chat.id, message_id=callback.message.message_id,caption=f"3Ô∏è‚É£–î–æ–±–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π:‚§µÔ∏è\n\nhttps://t.me/{bot_name}?start={ref_id}",reply_markup=markup)
    elif callback.data == 'item_admin1':
        cursor = connect.cursor()
        cursor.execute("select count(*) from users")
        result = cursor.fetchone()
        print(result)
        await bot.send_message(callback.message.chat.id, f'üë§ –û–±—â–µ–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {result[0]}')
    elif callback.data == 'item_admin2':
        img = open('images/admin.jpg', 'rb')
        await bot.send_photo(callback.message.chat.id, img)

async def error_command(chat_id):
    return await bot.send_message(chat_id, '<b>‚õî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –¥–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!</b>', parse_mode='html')

async def start_with_ref_link(chat_id, ref_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∞', callback_data='cancel_send_photo'))
    User = get_user(ref_id)
    if User is not None:
        await bot.send_message(chat_id,f'<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥!üëã</b>\n–° –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ —Ç—ã –º–æ–∂–µ—à—å —Å–æ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π —Å–æ–±—Ä–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ç–æ —Å —Ç–æ–±–æ–π –∏ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∑–∞–±—ã—Ç—ã–µ –∏ —Å–º–µ—à–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã!\n\n<b>–¢—ã –ø–µ—Ä–µ—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ {User[2]} –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ –≤ —á–∞—Ç –≤–∞—à–∏ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ç–æ, –º—ã –∏—Ö –ø–µ—Ä–µ—à–ª—ë–º –∫ {User[2]}, –Ω–æ —á—Ç–æ–±—ã –æ–Ω —á—Ç–æ-—Ç–æ —É–≤–∏–¥–µ–ª, –µ–º—É –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–µ–º-—Ç–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π –≤ –æ—Ç–≤–µ—Ç üôÇ</b>',parse_mode='html', reply_markup=markup)

async def only_photo(User):
    await bot.send_message(User[1], "‚ö†Ô∏è <b>–ó–∞–∫–æ–Ω—á–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚ùå–û—Ç–º–µ–Ω–∞¬ª</b>", parse_mode='html')
    await start_with_ref_link(User[1], User[3])

async def send_menu_message(chat_id, message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    start_button1 = types.KeyboardButton('üåÅ –ú–æ—è –≥–∞–ª–µ—Ä–µ—è')
    start_button2 = types.KeyboardButton('üì® –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
    start_button3 = types.KeyboardButton('üì∏ –°–æ–±—Ä–∞—Ç—å —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ —Å –¥—Ä—É–∑–µ–π')
    start_button4 = types.KeyboardButton('üìï –û –Ω–∞—Å')
    markup.add(start_button1, start_button3, start_button2, start_button4)

    await bot.send_message(chat_id, message, parse_mode='html', reply_markup=markup)


asyncio.run(bot.polling(none_stop=True))